from os import chdir
import numpy as np
import matplotlib.pyplot as plt
from astropy.table import Table, join
from glob import glob

in_dir = '/home/klemen/Solar-spectral-siblings/Distances_Step2_p0_SNRsamples1000_ext0_oklinesonly_origsamp_G20180327_C180325_multiabund_comb/'
chdir(in_dir)

galah_data_dir = '/home/klemen/data4_mount/'
c_data = Table.read(galah_data_dir+'sobject_iraf_iDR2_180325_cannon.fits')
g_data = Table.read(galah_data_dir+'sobject_iraf_53_reduced_20180327.fits')
p_data = Table.read(galah_data_dir+'photometry/apass_dr53_20180327.csv')
g_data = join(g_data, p_data, keys='sobject_id', join_type='left')

# settings
compare_elements = ['Al', 'Ba', 'Ca', 'Cr', 'Cu', 'Fe', 'Mg', 'Mn', 'Na', 'Ni', 'O', 'Sc', 'Si', 'Ti', 'V', 'Y', 'Zn']
sim_col = 'canberra'
sim_col_offset = 0.02
perc_highlight = 25

# read data
sim_prefix = 'solar_similarity_b1234_gp'
sim_elements = glob(sim_prefix+'_*.csv')
sim_elements = np.sort(sim_elements)
elements_str = np.array([s.split('_')[-1].split('.')[0] for s in sim_elements])
idx_elem_use = np.where([el in compare_elements for el in elements_str])[0]
sim_elements = list(sim_elements[idx_elem_use])
elements_str = list(elements_str[idx_elem_use])
# add lithium to the end of graph
sim_elements.append(sim_prefix+'_Li.csv')
elements_str.append('Li')

sim_all = Table.read(sim_prefix+'.csv')

n_objects = len(sim_all)
n_elements = len(sim_elements)

plot_y_pos = np.arange(n_objects)

x_offset = 0.0
plt.figure(figsize=(8, 10))
plt.scatter(np.full(n_objects, x_offset) + sim_all[sim_col], plot_y_pos, lw=0, s=8, c='black')
idx_higlight_all = sim_all[sim_col] < np.percentile(sim_all[sim_col], perc_highlight)
plt.scatter((np.full(n_objects, x_offset) + sim_all[sim_col])[idx_higlight_all], plot_y_pos[idx_higlight_all], lw=0, s=12, c='red')
plt.axvline(0.0, lw=1, ls='--', c='black', alpha=0.33)

n_selected = np.full(n_objects, 0)
for i_sim_file in range(n_elements):
    sim_element = Table.read(sim_elements[i_sim_file])
    x_offset = 0.0 + sim_col_offset*(i_sim_file+1)
    plt.scatter(np.full(n_objects, x_offset) + sim_element[sim_col], plot_y_pos, lw=0, s=8, c='black')
    idx_higlight = sim_element[sim_col] < np.percentile(sim_element[sim_col], perc_highlight)
    plt.scatter((np.full(n_objects, x_offset) + sim_element[sim_col])[idx_higlight], plot_y_pos[idx_higlight], lw=0, s=12, c='red')
    plt.axvline(x_offset, lw=1, ls='--', c='black', alpha=0.33)
    if elements_str[i_sim_file] is not 'Li':
        n_selected += np.int8(idx_higlight)
    else:
        low_lithium = sim_element[sim_col] <= 0.0045
# xticks
x_tics = np.hstack((['All'], elements_str))
plt.xticks(np.arange(n_elements+1)*sim_col_offset, x_tics)
# ytics
y_n_sel = np.char.array([' ('+str(ns)+')' for ns in n_selected])
y_s_id = np.char.array([str(sid) for sid in sim_all['sobject_id']])
y_tick_label = y_s_id+y_n_sel
y_tick_label[n_selected < 10] = ''
# plt.yticks(plot_y_pos, sim_all['sobject_id'])
plt.yticks(plot_y_pos, y_tick_label)
plt.xlabel('Examined chemical elements and their similarities')
plt.ylabel('Unique star identifier with number of matching elements')
plt.tight_layout()
# plt.show()
plt.savefig('gp_distance_all.png', dpi=200)
plt.close()

min_best_elements = 10
print 'Best with minimum of {:.0f} best elements:'.format(min_best_elements)
idx_b_elem = n_selected >= min_best_elements
print ','.join(y_s_id[idx_b_elem])
print 'Best with minimum and selected by all:'
idx_best_elem_all = np.logical_and(idx_higlight_all, idx_b_elem)
print ','.join(y_s_id[idx_best_elem_all])
print 'Best with minimum and selected by all and lithium:'
idx_best_elem_all_Li = np.logical_and(low_lithium, idx_best_elem_all)
print ','.join(y_s_id[idx_best_elem_all_Li])

# galah_data
sobj_selected = sim_all['sobject_id'][n_selected >= min_best_elements]
sobj_selected_2 = sim_all['sobject_id'][np.logical_and(n_selected >= min_best_elements, idx_higlight_all)]
print g_data[np.in1d(g_data['sobject_id'], sobj_selected)]['sobject_id','ra_1','dec_1','galah_id','rv_guess','red_flag','Bmag','Vmag','gpmag','rpmag']
print g_data[np.in1d(g_data['sobject_id'], sobj_selected_2)]['sobject_id','ra_1','dec_1','galah_id','rv_guess','red_flag','Bmag','Vmag','gpmag','rpmag', 'snr_c1_guess','snr_c2_guess']
print c_data[np.in1d(c_data['sobject_id'], sobj_selected_2)]['sobject_id','galah_id', 'Teff_cannon', 'Logg_cannon', 'Fe_H_cannon','flag_cannon']


for g_id in g_data[np.in1d(g_data['sobject_id'], sobj_selected_2)]['galah_id']:
    g_data_sub = g_data[g_data['galah_id'] == g_id]
    c_data_sub = c_data[c_data['galah_id'] == g_id]
    if len(g_data_sub) > 1:
        print g_data_sub['sobject_id','ra_1','dec_1','galah_id','rv_guess','red_flag','Bmag','Vmag','gpmag','rpmag', 'snr_c1_guess','snr_c2_guess']
        print c_data_sub['sobject_id','galah_id', 'Teff_cannon', 'Logg_cannon', 'Fe_H_cannon','flag_cannon']

# g_data_sub = g_data[np.in1d(g_data['sobject_id'],[140310003301028,140312004501092,140314004401277,140413003201328,140415002401342,140608002501303,140709003001184,140710000101230,140710000101252,140711002401316,140713004001112,140805003101303,140805004201051,140806002301392,140806002901279,140806004101159,140807005001277,140808002701299,140808002701338,140808003701104,140808003701261,140809003101322,140809003701037,140809003701146,140811003901103,140811004501035,140814003301261,141102002401182,141102002701267,141103003101379,141103003601164,150101004001347,150102003201119,150103003001048,150105002801352,150206004301295,150207005101103,150207005101176,150208003201286,150211004701179,150408005301116,150408005301259,150408005901078,150409002601317,150409003101129,150411003601245,150411004101120,150411004101331,150411006101106,150411006601321,150412002601280,150413003601344,150413005101096,150427004801275,150428000601336,150429001601268,150602002101246,150603003801086,150606005901065,150606005901296,150606005901339,150703003101181,150703005601061,150703005601062,150703005601082,150705001901052,150705005401363,150705006401314,150824002601134,150828003701040,150828004201034,150828005701331,150829002601283,150829003101225,150830004601175,150830005101337,150830005101391,151009001601363,151109003601038,151219003601245,151219003601298,151227005201142,151231002601074,160106003601037,160107002601011,160107003101157,160110003601039,160112001601056,160123002601079,160125002401126,160125004501038,160125004501256,160130004601023,160130005201357,160130006301234,160325002701048,160325002701275,160325003201071,160326001101395,160326002101077,160327003601210,160327004101056,160327004101248,160327004101343,160327004601337,160327006101355,160328004201051,160330002601095,160331002201390,160331002701393,160331005301201,160401003901215,160401004401051,160401004401123,160402005101147,160402005601084,160402005601358,160402006101388,160403003601392,160420003301342,160420004301031,160420006301085,160421002101006,160422003501107,160422004501162,160422004501312,160424002101194,160425001901071,160425001901089,160425001901273,160426004501264,160426004501395,160426005501042,160426006701393,160513001101030,160513001601022,160513002601086,160518001901269,160519002601040,160519003101395,160519004101142,160520002101297,160520002601048,160521004801353,160522003601193,160522006101314,160522006601193,160523004001343,160524002701116,160524004201306
# ,160524005501254,160524006101090,160524006601258,160525002201033,160525003201154,160530002801021,160530003901026,160530003901054,160530005001359,160530005501077,160531001601307,160531004601362,160531005101256,160531005601362,160531006101153,160602001601307,160813002101147,160813002101295,160813002101314,160813003601074,160813004101136,160814000101356,160814000101366,160814001201024,160814001201146,160815002601022,160815004801066,160816004701036,160817002601023,160817002601053,160916001801076,160916001801111,160916001801263,160916003801373,160916004301152,160916004301242,160919001601330,160919004001328,160919005101297,161006004401018,161007002801397,161008002501018,161009002601018,161009003201386,161009005901171,161012002101185,161104002801361,161104002801394,161104003801323,161105003101019,161105004601015,161106003101031,161107001601133,161109003101231,161115002701019,161116001701314,161116003301345,161116003801308,161117002701357,161117004001161,161117004601144,161117004601245,161118002601176,161118002601376,161118004701221,161119002801292,161210004201315,161211003101387,161212002101397,161213004101187,161217002601138,161217004101075,161217004101234,161217004601271,161219003101122,161219004101351,161219005101228,170104002401006,170105003101138,170107004201309,170108004601041,170108004601140,170109002801065,170109003801073,170112002101294,170112002601348,170112003601298,170113001601220,170114001601154,170114004101329,170117003101044,170119002601393,170121002801292,170122002101017,170130003601019,170205003901143,170205005401120,170205005401275,170205005401391,170206004201399,170206005201287,170206005701018,170206005701345,170217001601332,170219001601353,170219002601038,170219003601351,170220002101322,170220004101045,170407005201023,170408004501048,170408004501192,170411002601201,170413003101069,170413004601076,170413005101082,170413005601032,170414005101057,170416003301117,170416003801070,170416004801107,170417003201330,170418001601351,170418002701261,170506002901026,170506002901139,170506003901066,170507006701148,170507007801271,170507008301118,170507010101097,170507011701387,170508001601184,170508002601001,170508004801312,170509002701171,170509004701096,170509005201063,170510007301226,170511004001234,170514002401099,170514003001180,170514003301001,170514003301011,170514003301312,170515002101186,170515003101035,170515003101036,170515006101289,170516000601373
# ,170516001601139,170516002101273,170530001601155,170601003101179,170602003701213,170614004101381,170614004601055,170614004601061,170614005101328,170710002701354,170710003201145,170711001501368,170711002001243,170711005101185,170711005801034,170712004801366,170713004601346,170713005101388,170723003601118,170723005101385,170724003601147,170724004601055,170724005101385,170801004001010,170805003601318,170906003601147,170906003601295,170906003601357,170906004101067,170906004601391,170907002601114,170907004101051,170908001601149,170909002601291,170910001801313,170910002601041,170910003101074,170910003101081,170910003601321,170911002101145,170911002101388,170911003101383,170912002901303,171001001601082,171001001901355,171001002401098,171001002901335,171003002101143,171003002601296,171003005101315,171027002801041,171029003801271,171102003901139,171102005001324,171106001901092,171106002401011,171106002401374,171106003601365,171205004101175,171206004601087,171207003601278,171227002601211,171227003101174,171227003601367,171227005301138,171228002701282,171230003101172,180102004601237,180103002601220,180103002601361,180129003101184
# ])]
# print g_data_sub['sobject_id', 'ra_1', 'dec_1', 'galah_id', 'red_flag', 'Bmag', 'Vmag', 'gpmag', 'rpmag', 'snr_c1_guess', 'snr_c2_guess']
